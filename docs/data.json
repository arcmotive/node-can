{
    "project": {},
    "files": {
        "src/can.d.ts": {
            "name": "src/can.d.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/socketcan.ts": {
            "name": "src/socketcan.ts",
            "modules": {
                "Signals": 1
            },
            "classes": {
                "Signal": 1,
                "Message": 1,
                "DatabaseService": 1
            },
            "fors": {
                "exports": 1,
                "Signal": 1,
                "DatabaseService": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "Signals": {
            "name": "Signals",
            "submodules": {},
            "elements": {},
            "classes": {
                "exports": 1,
                "Signal": 1,
                "Message": 1,
                "DatabaseService": 1
            },
            "fors": {
                "exports": 1,
                "Signal": 1,
                "DatabaseService": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "src/socketcan.ts",
            "line": 284,
            "description": "The Signals modules provides an interface to access the values/signals\nencoded in CAN messages."
        }
    },
    "classes": {
        "exports": {
            "name": "exports",
            "shortname": "exports",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Signals",
            "namespace": ""
        },
        "Signal": {
            "name": "Signal",
            "shortname": "Signal",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Signals",
            "namespace": "",
            "file": "src/socketcan.ts",
            "line": 86,
            "description": "The actual signal."
        },
        "Message": {
            "name": "Message",
            "shortname": "Message",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Signals",
            "namespace": "",
            "file": "src/socketcan.ts",
            "line": 198,
            "description": "Just a container to keep the Signals."
        },
        "DatabaseService": {
            "name": "DatabaseService",
            "shortname": "DatabaseService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Signals",
            "namespace": "",
            "file": "src/socketcan.ts",
            "line": 284,
            "description": "A DatabaseService is usually generated once per bus to collect signals\ncoded in the CAN messages according a DB description.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "channel",
                    "description": "RAW channel"
                },
                {
                    "name": "db_desc",
                    "description": "Set of rules to decode/encode signals (@parse_kcd.js)"
                }
            ],
            "return": {
                "description": "a new DatabaseService"
            }
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/can.d.ts",
            "line": 17,
            "description": "Add listener to receive certain notifications",
            "itemtype": "method",
            "name": "addListener",
            "params": [
                {
                    "name": "event",
                    "description": "onMessage to register for incoming messages",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "JS callback object",
                    "type": "Any"
                },
                {
                    "name": "instance",
                    "description": "Optional instance pointer to call callback",
                    "type": "Any"
                }
            ],
            "class": "exports"
        },
        {
            "file": "src/can.d.ts",
            "line": 30,
            "description": "Start operation on this CAN channel",
            "itemtype": "method",
            "name": "start",
            "class": "exports"
        },
        {
            "file": "src/can.d.ts",
            "line": 36,
            "description": "Stop any operations on this CAN channel",
            "itemtype": "method",
            "name": "stop",
            "class": "exports"
        },
        {
            "file": "src/can.d.ts",
            "line": 42,
            "description": "Send a CAN message immediately.\n\nPLEASE NOTE: By default, this function may block if the Tx buffer is not available. Please use\ncreateRawChannelWithOptions({non_block_send: false}) to get non-blocking sending activated.",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "message",
                    "description": "JSON object describing the CAN message, keys are id, length, data {Buffer}, ext or rtr",
                    "type": "Object"
                }
            ],
            "class": "exports"
        },
        {
            "file": "src/can.d.ts",
            "line": 53,
            "description": "Send a CAN FD message immediately.\n\nPLEASE NOTE: By default, this function may block if the Tx buffer is not available. Please use\ncreateRawChannelWithOptions({non_block_send: false}) to get non-blocking sending activated.\n\nPLEASE NOTE: Might fail if underlying device doesnt support CAN FD. Structure is not yet validated.",
            "itemtype": "method",
            "name": "sendFD",
            "params": [
                {
                    "name": "message",
                    "description": "JSON object describing the CAN message, keys are id, length, data {Buffer}, ext",
                    "type": "Object"
                }
            ],
            "class": "exports"
        },
        {
            "file": "src/can.d.ts",
            "line": 66,
            "description": "Set a list of active filters to be applied for incoming messages",
            "itemtype": "method",
            "name": "setRxFilters",
            "params": [
                {
                    "name": "filters",
                    "description": "single filter or array of filter e.g. { id: 0x1ff, mask: 0x1ff, invert: false}, result of (id & mask)",
                    "type": "Object"
                }
            ],
            "class": "exports"
        },
        {
            "file": "src/can.d.ts",
            "line": 73,
            "description": "Set a list of active filters to be applied for errors",
            "itemtype": "method",
            "name": "setErrorFilters",
            "params": [
                {
                    "name": "errorMask",
                    "description": "CAN error mask",
                    "type": "Uint32"
                }
            ],
            "class": "exports"
        },
        {
            "file": "src/can.d.ts",
            "line": 80,
            "description": "Disable loopback of channel. By default it is activated",
            "itemtype": "method",
            "name": "disableLoopback",
            "class": "exports"
        },
        {
            "file": "src/socketcan.ts",
            "line": 39,
            "itemtype": "method",
            "name": "createRawChannel",
            "params": [
                {
                    "name": "channel",
                    "description": "Channel name (e.g. vcan0)",
                    "type": "String"
                },
                {
                    "name": "timestamps",
                    "description": "Whether or not timestamps shall be generated when reading a message",
                    "type": "Bool"
                },
                {
                    "name": "protocol",
                    "description": "optionally provide another default protocol value (default is CAN_RAW)",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "a new channel object or exception",
                "type": "RawChannel"
            },
            "class": "exports",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 61,
            "itemtype": "method",
            "name": "createRawChannelWithOptions",
            "params": [
                {
                    "name": "channel",
                    "description": "Channel name (e.g. vcan0)",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "list of options (timestamps, protocol, non_block_send)",
                    "type": "Dict"
                }
            ],
            "return": {
                "description": "a new channel object or exception",
                "type": "RawChannel"
            },
            "class": "exports",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 116,
            "description": "this will allow triggering on mux'ed message ids.",
            "class": "Signal",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 122,
            "description": "Keep track of listeners who want to be notified if this signal changes",
            "itemtype": "method",
            "name": "onChange",
            "params": [
                {
                    "name": "listener",
                    "description": "JS callback to get notification"
                }
            ],
            "class": "Signal",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 133,
            "description": "Keep track of listeners who want to be notified if this signal updates",
            "itemtype": "method",
            "name": "onUpdate",
            "params": [
                {
                    "name": "listener",
                    "description": "JS callback to get notification"
                }
            ],
            "class": "Signal",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 144,
            "description": "Remove listener from signal onChange and/or onUpdate",
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "listener",
                    "description": "to be removed"
                }
            ],
            "class": "Signal",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 157,
            "description": "Set new value of this signal. Any local registered clients will\nreceive a notification. Please note, no CAN message is actually\nsend to the bus (@see DatabaseServer::send)",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "newValue",
                    "description": "New value to set",
                    "type": "Bool|double|integer"
                }
            ],
            "class": "Signal",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 213,
            "description": "CAN identifier",
            "itemtype": "attribute",
            "name": "id",
            "final": 1,
            "class": "Message",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 220,
            "description": "Extended Frame Format used",
            "itemtype": "attribute",
            "name": "ext",
            "final": 1,
            "class": "Message",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 227,
            "description": "Symbolic name",
            "itemtype": "attribute",
            "name": "name",
            "final": 1,
            "class": "Message",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 234,
            "description": "Length in bytes of resulting CAN message",
            "itemtype": "attribute",
            "name": "len",
            "final": 1,
            "class": "Message",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 242,
            "description": "This is the time frame that the message gets generated",
            "itemtype": "attribute",
            "name": "interval",
            "final": 1,
            "class": "Message",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 250,
            "description": "This tells us the message is mutliplexed.",
            "itemtype": "attribute",
            "name": "muxed",
            "final": 1,
            "class": "Message",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 258,
            "description": "Multiplexor parameter (just one supported right now).",
            "itemtype": "attribute",
            "name": "mux",
            "final": 1,
            "class": "Message",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 266,
            "description": "Named information to inform that the frame is CAN_FD format .",
            "itemtype": "attribute",
            "name": "Boolean",
            "final": 1,
            "class": "Message",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 364,
            "description": "Construct a CAN message and encode all related signals according\nthe rules. Finally send the message to the bus.",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "msg_name",
                    "description": "Name of the message to generate (indicate mux by append .MUX_VALUE in hex)"
                }
            ],
            "class": "DatabaseService",
            "module": "Signals"
        },
        {
            "file": "src/socketcan.ts",
            "line": 444,
            "itemtype": "method",
            "name": "parseNetworkDescription",
            "params": [
                {
                    "name": "file",
                    "description": "Path to KCD file to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "DB description to be used in DatabaseService"
            },
            "class": "exports",
            "module": "Signals"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nthis will allow triggering on mux'ed message ids.",
            "line": " src/socketcan.ts:116"
        }
    ]
}